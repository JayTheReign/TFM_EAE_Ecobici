# -*- coding: utf-8 -*-
"""Código definitivo bicis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PsLnF5IexmzWs_PhHLS9o8Muih8krdbU
"""

#Importar librerias generales y cargar datos
import pandas as pd
import numpy as np
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import make_scorer
import xgboost as xgb

from google.colab import drive
drive.mount('/content/drive')
import os

# Ruta a la subcarpeta dentro de Google Drive
subfolder_path = '/content/drive/MyDrive/TFM EAE/Base_bike_statios'

# Cambiar el directorio actual a la subcarpeta
os.chdir(subfolder_path)

# Cargar Base de Datos

base_bicis = pd.read_csv('base_completa.csv')
base_meteo = pd.read_excel('base_meteo_ba.xlsx')

#Pasar base de datos bicis a lista
list_bicis = base_bicis.values.tolist()

#Pasar base de datos meteo/feriado a lista
list_meteo = base_meteo.values.tolist()

#Cambiar filas incorrectas por correctas
for i in range (len(list_bicis)):
  for j in range (len(list_meteo)):
    if list_bicis[i][16] == list_meteo[j][8]:
      list_bicis[i][20] = list_meteo[j][7]
      list_bicis[i][19] = list_meteo[j][6]
      list_bicis[i][21] = list_meteo[j][3]
      list_bicis[i][22] = list_meteo[j][4]
      j = len(list_meteo)

#Devolver la lista a Dataframe y poner nombre a columnas
base_bicis_ok = pd.DataFrame.from_records(list_bicis,
                               columns=['unnamed: 0','nombre_archivo','id_estacion','slots','empty_slots','free_bikes','nombre_station','address','latitud','longitud','anio','mes','dia','hora','minuto','segundo','fecha','T_15_PREV','T_30_PREV','feriado','lluvia','t_max','t_min', 'OUTPUT'])

base_bicis_ok.head()

# Ordenar por 'nombre_station' y 'fecha'
base_bicis = base_bicis_ok.sort_values(by=['nombre_station', 'fecha'])

#Crear y Rellenar output con los valores de la columna OUTPUT de la siguiente fila
base_bicis['output15'] = base_bicis.groupby('nombre_station')['OUTPUT'].shift(-1)

# Ordenar por 'fecha'
base_bicis = base_bicis.sort_values(by=['fecha'])

base_bicis.head()

#Limpiar la nueva columna output15
base_bicis = base_bicis.dropna(subset=['output15'])

#Analisis y limpieza de datos
#Nos quedamos solo con los datos que nos interesan para el análisis
base_bicis = base_bicis[{'slots', 'empty_slots', 'free_bikes', 'anio','dia', 'mes', 'hora','minuto','segundo','fecha', 'feriado', 'lluvia',  'T_15_PREV', 'T_30_PREV', 'OUTPUT', 'output15'}]

base_bicis = base_bicis.dropna()

base_bicis

# Seleccionamos las columnas relevantes para el modelo para distintos casos

#caso 1 es t-15 con lluvia sin feriado
x1 = base_bicis.drop(['OUTPUT', 'T_30_PREV', 'free_bikes', 'empty_slots','fecha', 'feriado', 'output15'], axis=1)

#caso 2 es t-15 sin lluvia sin feriado

x2 = base_bicis.drop(['OUTPUT', 'T_30_PREV', 'lluvia','free_bikes', 'empty_slots','fecha', 'feriado', 'output15'], axis=1)

#caso 3 es t-15 con lluvia con feriado

x3 = base_bicis.drop(['OUTPUT', 'T_30_PREV','free_bikes', 'empty_slots','fecha', 'output15'], axis=1)

#caso 4 es t-15 sin lluvia con feriado

x4 = base_bicis.drop(['OUTPUT', 'T_30_PREV','free_bikes', 'empty_slots','fecha', 'lluvia', 'output15'], axis=1)

#caso 5 es t-30 con lluvia sin feriado

x5 = base_bicis.drop(['OUTPUT', 'T_15_PREV','free_bikes', 'empty_slots','fecha', 'feriado', 'output15'], axis=1)

#caso 6 es t-30 sin lluvia sin feriado

x6 = base_bicis.drop(['OUTPUT', 'T_15_PREV', 'lluvia','free_bikes', 'empty_slots','fecha','feriado', 'output15'], axis=1)

#caso 7 es t-30 con lluvia con feriado

x7 = base_bicis.drop(['OUTPUT', 'T_15_PREV', 'free_bikes', 'empty_slots','fecha', 'output15'], axis=1)

#caso 8 es t-30 sin lluvia con feriado

x8 = base_bicis.drop(['OUTPUT', 'T_15_PREV','free_bikes', 'empty_slots','fecha','lluvia', 'output15'], axis=1)

#caso 9 es t-15 y t-30 sin lluvia sin feriado

x9 = base_bicis.drop(['OUTPUT', 'lluvia','free_bikes', 'empty_slots','fecha','feriado', 'output15'], axis=1)

#caso 10 es t-15 y t-30 con lluvia con feriado

x10 = base_bicis.drop(['OUTPUT', 'free_bikes', 'empty_slots','fecha', 'output15'], axis=1)

#caso 11 es t-15 y t-30 sin lluvia con feriado

x11 = base_bicis.drop(['OUTPUT','free_bikes', 'empty_slots','fecha','lluvia', 'output15'], axis=1)

#caso 12 es t-15 y t-30 con lluvia sin feriado

x12 = base_bicis.drop(['OUTPUT','free_bikes', 'empty_slots','fecha', 'feriado', 'output15'], axis=1)

# Output
y = base_bicis['output15']

"""Modelo Regresión Lineal"""

# Definir las variables x y los nombres de los casos
x_variables = [x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12]
caso_nombres = [
    'Caso 1 es t-15 con lluvia sin feriado',
    'Caso 2 es t-15 sin lluvia sin feriado',
    'Caso 3 es t-15 con lluvia con feriado',
    'Caso 4 es t-15 sin lluvia con feriado',
    'Caso 5 es t-30 con lluvia sin feriado',
    'Caso 6 es t-30 sin lluvia sin feriado',
    'Caso 7 es t-30 con lluvia con feriado',
    'Caso 8 es t-30 sin lluvia con feriado',
     'Caso 9 es t15 y t-30 sin lluvia sin feriado',
    'Caso 10 es t15 y t-30 con lluvia con feriado',
    'Caso 11 es t15 y t-30 sin lluvia con feriado',
    'Caso 12 es t15 y t-30 con lluvia sin feriado'
]

# Output
y = base_bicis['output15']

#Modelo

mse_values = []

for i, x_var in enumerate(x_variables):
    caso_nombre = caso_nombres[i]

    x_train = x_var.head(2397698)
    x_test = x_var.tail(599424)
    y_train = y.head(2397698)
    y_test = y.tail(599424)


    regression_model = LinearRegression()
    regression_model.fit(x_train, y_train)

    y_pred = regression_model.predict(x_test)
    for m in range (len(y_pred)):
      if y_pred[m] > 1:
        y_pred[m] = 1
      elif y_pred[m] < 0:
        y_pred[m] = 0
    mse = mean_squared_error(y_test, y_pred)
    mse_values.append(mse)

    print(caso_nombre)
    print("Error cuadrático medio (MSE):", mse)
    print("-" * 30)  # Separador entre casos

min_mse_index = mse_values.index(min(mse_values))
best_caso_nombre = caso_nombres[min_mse_index]
best_mse = mse_values[min_mse_index]

print("La variable con el menor error es:", best_caso_nombre)
print("Error cuadrático medio (MSE) más bajo:", best_mse)

"""Modelo boosting"""

#Sample 10%
porcentaje10 = int(len(base_bicis)/10)
base10 = base_bicis.head(porcentaje10)

base10

# Seleccionamos las columnas relevantes para el modelo para distintos casos

#caso 1 es t-15 con lluvia sin feriado
x1 = base10.drop(['OUTPUT', 'T_30_PREV', 'free_bikes', 'empty_slots','fecha', 'feriado', 'output15'], axis=1)

#caso 2 es t-15 sin lluvia sin feriado

x2 = base10.drop(['OUTPUT', 'T_30_PREV', 'lluvia','free_bikes', 'empty_slots','fecha', 'feriado', 'output15'], axis=1)

#caso 3 es t-15 con lluvia con feriado

x3 = base10.drop(['OUTPUT', 'T_30_PREV','free_bikes', 'empty_slots','fecha', 'output15'], axis=1)

#caso 4 es t-15 sin lluvia con feriado

x4 = base10.drop(['OUTPUT', 'T_30_PREV','free_bikes', 'empty_slots','fecha', 'lluvia', 'output15'], axis=1)

#caso 5 es t-30 con lluvia sin feriado

x5 = base10.drop(['OUTPUT', 'T_15_PREV','free_bikes', 'empty_slots','fecha', 'feriado', 'output15'], axis=1)

#caso 6 es t-30 sin lluvia sin feriado

x6 = base10.drop(['OUTPUT', 'T_15_PREV', 'lluvia','free_bikes', 'empty_slots','fecha','feriado', 'output15'], axis=1)

#caso 7 es t-30 con lluvia con feriado

x7 = base10.drop(['OUTPUT', 'T_15_PREV', 'free_bikes', 'empty_slots','fecha', 'output15'], axis=1)

#caso 8 es t-30 sin lluvia con feriado

x8 = base10.drop(['OUTPUT', 'T_15_PREV','free_bikes', 'empty_slots','fecha','feriado', 'output15'], axis=1)

#caso 9 es t-15 y t-30 sin lluvia sin feriado

x9 = base10.drop(['OUTPUT', 'lluvia','free_bikes', 'empty_slots','fecha','feriado', 'output15'], axis=1)

#caso 10 es t-15 y t-30 con lluvia con feriado

x10 = base10.drop(['OUTPUT', 'free_bikes', 'empty_slots','fecha', 'output15'], axis=1)

#caso 11 es t-15 y t-30 sin lluvia con feriado

x11 = base10.drop(['OUTPUT','free_bikes', 'empty_slots','fecha','lluvia', 'output15'], axis=1)

#caso 12 es t-15 y t-30 con lluvia sin feriado

x12 = base10.drop(['OUTPUT','free_bikes', 'empty_slots','fecha', 'feriado', 'output15'], axis=1)


# output
y = base10['output15']

x_variables = [x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12]

#Modelo

min_mse_values = []
train = int(len(base10)*0.8)
test = int (len(base10)*0.2)
for i, x_var in enumerate(x_variables):
    caso_nombre = caso_nombres[i]

    x_trainx = x_var.head(train)
    x_testx = x_var.tail(test)
    y_trainx = y.head(train)
    y_testx = y.tail(test)


    max_depth_xgb = []
    n_estimators_xgb = []
    xgb_mse = []


    for u in range(1, 6):
        for j in [10, 30, 100]:
            xgb_regressor = xgb.XGBRegressor(objective='reg:squarederror', max_depth=u, alpha=0, learning_rate=0.1, n_estimators=j)
            model_xgb = xgb_regressor.fit(x_trainx, y_trainx)
            y_pred_xgb = model_xgb.predict(x_testx)
            mse = mean_squared_error(y_testx, y_pred_xgb)

            max_depth_xgb.append(u)
            n_estimators_xgb.append(j)
            xgb_mse.append(mse)


    # encontrar el MSE mínimo
    min_mse_index = xgb_mse.index(min(xgb_mse))
    min_mse_value = xgb_mse[min_mse_index]
    # valores corrrespondientes de los hiperparametros
    min_mse_max_depth = max_depth_xgb[min_mse_index]
    min_mse_n_estimators = n_estimators_xgb[min_mse_index]
    min_mse_values.append(min_mse_value)

    print(caso_nombre)
    print("Error cuadrático medio mínimo (MSE):", min_mse_value)
    print("Max_depth correspondiente a este MSE es", min_mse_max_depth)
    print("n_estimators correspondientes a este MSE es", min_mse_n_estimators)
    print("-" * 30)  # Separador entre casos

min_mse_index2 = min_mse_values.index(min(min_mse_values))
best_caso_nombre = caso_nombres[min_mse_index2]
best_mse = min_mse_values[min_mse_index2]

print("La variable con el menor error es:", best_caso_nombre)
print("Error cuadrático medio (MSE) más bajo:", best_mse)